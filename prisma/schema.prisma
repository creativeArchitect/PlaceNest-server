generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Branch {
  CS
  CY
  IT
  ME
  ECE
  EIC
  EE
  CE
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum JobType {
  Internship
  PartTime
  FullTime
  Contract
}

enum Role {
  STUDENT
  COORDINATOR
  COMPANY
}

enum Year {
  FIRST
  SECOND
  THIRD
  FOURTH
}

enum ApplicationMode {
  OFFLINE
  ONLINE
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  phone    String @unique
  password String
  role     Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id          String @id @default(uuid())
  name        String
  email       String
  industry    String
  description String
  website     String
  founded     String
  linkedin    String
  location    String

  jobs Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, industry, email])
}

model Student {
  id               String        @id @default(uuid())
  name             String
  email            String        @unique
  phone            String        @unique
  branch           Branch?
  year             Year?
  cgpa             Decimal?      @db.Decimal(3, 2)
  activeBacklog    Boolean?
  backlogs         Int?
  isVerified       Boolean       @default(false)
  resumeUrl        String?
  profileCompleted Boolean       @default(false)
  application      Application[]

  @@index([branch, year, phone, email])
}

model Coordinator {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  phone            String   @unique
  password         String
  branch           Branch?
  year             Year?
  cgpa             Decimal? @db.Decimal(3, 2)
  activeBacklog    Boolean?
  backlogs         Int?
  isVerified       Boolean  @default(false)
  resumeUrl        String?
  profileCompleted Boolean  @default(false)

  @@index([branch, year, phone, email])
}

model Job {
  id          String    @id @default(uuid())
  type        JobType
  title       String
  description String
  role        String
  location    String
  package     String
  cgpaCutOff  Decimal   @db.Decimal(3, 2)
  deadline    DateTime
  status      JobStatus @default(ACTIVE)

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  application Application[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([status, deadline, companyId])
}

model Application {
  id     String            @id @default(uuid())
  status ApplicationStatus @default(PENDING)
  mode   ApplicationMode

  jobId     String
  job       Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, studentId])
}
